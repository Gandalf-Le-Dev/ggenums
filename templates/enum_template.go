package templates

const ConstEnumTemplate = `// Code generated by ggenums; DO NOT EDIT.
package {{.Package}}

import (
    "encoding/json"
    "fmt"
)

var all{{.Type}}s = []{{.Type}}{
    {{range .Values -}}
    {{$.Type}}{{.ConstantName}},
    {{end}}
}

var {{.Type | ToLower}}Names = map[{{.Type}}]string{
    {{range .Values -}}
    {{$.Type}}{{.ConstantName}}: "{{.StringValue}}",
    {{end}}
}

var {{.Type | ToLower}}Values = map[string]{{.Type}}{
    {{range .Values -}}
    "{{.StringValue}}": {{$.Type}}{{.ConstantName}},
    {{end}}
}

func (e {{.Type}}) String() string {
    if name, ok := {{.Type | ToLower}}Names[e]; ok {
        return name
    }
    return fmt.Sprintf("{{.Type}}(%d)", int(e))
}

func (e {{.Type}}) IsValid() bool {
    _, ok := {{.Type | ToLower}}Names[e]
    return ok
}

func Parse{{.Type}}(s string) ({{.Type}}, error) {
    if value, ok := {{.Type | ToLower}}Values[s]; ok {
        return value, nil
    }
    return 0, fmt.Errorf("invalid {{.Type}}: %s", s)
}

func (e {{.Type}}) MarshalJSON() ([]byte, error) {
    return json.Marshal(e.String())
}

func (e *{{.Type}}) UnmarshalJSON(data []byte) error {
    var s string
    if err := json.Unmarshal(data, &s); err != nil {
        return err
    }

    parsed, err := Parse{{.Type}}(s)
    if err != nil {
        return err
    }

    *e = parsed
    return nil
}

// All{{.Type}}s returns all valid {{.Type}} values
func All{{.Type}}s() []{{.Type}} {
    result := make([]{{.Type}}, len(all{{.Type}}s))
    copy(result, all{{.Type}}s)
    return result
}
`