package templates

const EnumTemplate = `// Code generated by ggenums; DO NOT EDIT.
package {{.Package}}

import (
	"encoding/json"
	"fmt"
)

type {{.Type}} string

const (
	{{range .Values}}
	{{$.Type}}{{.}} {{$.Type}} = "{{.}}"
	{{end}}
)

var All{{.Type}}s = []{{.Type}}{
	{{range .Values}}
	{{$.Type}}{{.}},
	{{end}}
}

func (e {{.Type}}) String() string {
	return string(e)
}

func (e {{.Type}}) IsValid() bool {
	switch e {
	{{range .Values}}
	case {{$.Type}}{{.}}:
		return true
	{{end}}
	default:
		return false
	}
}

func Parse{{.Type}}(s string) ({{.Type}}, error) {
	e := {{.Type}}(s)
	if !e.IsValid() {
		return "", fmt.Errorf("invalid {{.Type}}: %s", s)
	}
	return e, nil
}

func (e {{.Type}}) MarshalJSON() ([]byte, error) {
	if !e.IsValid() {
		return []byte("null"), nil
	}
	return json.Marshal(string(e))
}

func (e *{{.Type}}) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	parsed, err := Parse{{.Type}}(s)
	if err != nil {
		return err
	}

	*e = parsed
	return nil
}
`
