package templates


const EnumTemplate = `// Code generated by ggenums; DO NOT EDIT.
package {{.Package}}

import (
    "encoding/json"
    "fmt"
)

type {{.Type}}Enum string

const (
    {{range .Values -}}
    {{$.Type}}{{.ConstantName}} {{$.Type}}Enum = "{{.StringValue}}"
    {{end}}
)

var All{{.Type}}s = []{{.Type}}Enum{
    {{range .Values -}}
    {{$.Type}}{{.ConstantName}},
    {{end}}
}

func (e {{.Type}}Enum) String() string {
    return string(e)
}

func (e {{.Type}}Enum) IsValid() bool {
    switch e {
    {{range .Values -}}
    case {{$.Type}}{{.ConstantName}}:
        return true
    {{end}}
    default:
        return false
    }
}

func Parse{{.Type}}(s string) ({{.Type}}Enum, error) {
    e := {{.Type}}Enum(s)
    if !e.IsValid() {
        return "", fmt.Errorf("invalid {{.Type}}: %s", s)
    }
    return e, nil
}

func (e {{.Type}}Enum) MarshalJSON() ([]byte, error) {
    if !e.IsValid() {
        return []byte("null"), nil
    }
    return json.Marshal(string(e))
}

func (e *{{.Type}}Enum) UnmarshalJSON(data []byte) error {
    var s string
    if err := json.Unmarshal(data, &s); err != nil {
        return err
    }

    parsed, err := Parse{{.Type}}(s)
    if err != nil {
        return err
    }

    *e = parsed
    return nil
}
`
