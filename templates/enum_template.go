package templates

var EnumTemplate = `// Code generated by go generate; DO NOT EDIT.
package {{.Package}}

import (
	"encoding/json"
	"errors"
)

var (
	ErrInvalid{{.Type}} = errors.New("invalid {{.Type}}")
)

type {{.Type}} struct {
	value string
}

func (f {{.Type}}) String() string {
	return f.value
}

func (f {{.Type}}) MarshalJSON() ([]byte, error) {
	res := f.String()
	if res == "" {
		return []byte("null"), nil
	}

	res = "\"" + res + "\""

	return []byte(res), nil
}

func (f *{{.Type}}) UnmarshalJSON(data []byte) error {
	var s string
	errJSON := json.Unmarshal(data, &s)
	if errJSON != nil {
		return errJSON
	}

	if s == "" {
		return nil
	}

	res, err := {{.TypePlural}}.NewFromString(s)
	if err != nil {
		return err
	}

	*f = res

	return nil
}

func (f {{.Type}}) MarshalText() ([]byte, error) {
	return []byte(f.value), nil
}

func (f *{{.Type}}) UnmarshalText(text []byte) error {
	f.value = string(text)
	return nil
}

func (f {{.Type}}) IsZero() bool {
	return f.value == ""
}

var {{.TypePlural}} = {{.TypePluralLC}}{
	{{range $key, $value := .Values}}{{$value}}: {{$.Type}}{"{{$key}}"},
	{{end}}
}

type {{.TypePluralLC}} struct {
	{{range $key, $value := .Values}}{{$value}} {{$.Type}}
	{{end}}
}

func (f {{.TypePluralLC}}) NewFromString(s string) ({{.Type}}, error) {
	switch s {
	{{range $key, $value := .Values}}
	case "{{$key}}":
		return f.{{$value}}, nil
	{{end}}
	default:
		return {{.Type}}{}, ErrInvalid{{.Type}}
	}
}
`
