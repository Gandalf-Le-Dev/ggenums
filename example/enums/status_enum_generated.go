// Code generated by ggenums; DO NOT EDIT.
package enums

import (
	"encoding/json"
	"fmt"
)

type StatusEnum string

const (
	StatusPending    StatusEnum = "pending"
	StatusActive     StatusEnum = "active"
	StatusCompleted  StatusEnum = "completed"
	StatusInProgress StatusEnum = "in_progress"
)

var AllStatuss = []StatusEnum{
	StatusPending,
	StatusActive,
	StatusCompleted,
	StatusInProgress,
}

func (e StatusEnum) String() string {
	return string(e)
}

func (e StatusEnum) Validate() error {
	switch e {
	case StatusPending, StatusActive, StatusCompleted, StatusInProgress:
		return nil
	default:
		return fmt.Errorf("invalid Status: %s", e)
	}
}

func ParseStatus(s string) (StatusEnum, error) {
	e := StatusEnum(s)
	if err := e.Validate(); err != nil {
		return "", err
	}
	return e, nil
}

func (e StatusEnum) MarshalJSON() ([]byte, error) {
	if err := e.Validate(); err != nil {
		return []byte("null"), nil
	}
	return json.Marshal(string(e))
}

func (e *StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	parsed, err := ParseStatus(s)
	if err != nil {
		return err
	}

	*e = parsed
	return nil
}
